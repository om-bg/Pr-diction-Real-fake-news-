import streamlit as st
import pandas as pd
import os
import pickle
from final import predict_news

# Fonction pour charger un mod√®le enregistr√©
def load_saved_model(model_name):
    model_path = f"{model_name}.pkl"
    vectorizer_path = "vectorizer.pkl"

    if not os.path.exists(model_path):
        st.error(f"Le fichier {model_path} est introuvable. Veuillez d'abord entra√Æner le mod√®le.")
        return None, None

    if not os.path.exists(vectorizer_path):
        st.error("Le fichier vectorizer.pkl est introuvable. Veuillez d'abord entra√Æner un mod√®le.")
        return None, None

    with open(model_path, "rb") as model_file:
        model = pickle.load(model_file)

    with open(vectorizer_path, "rb") as vectorizer_file:
        vectorizer = pickle.load(vectorizer_file)

    return model, vectorizer

# Interface Streamlit
def main():
    st.title("üì∞ Fake News Detection")

    # S√©lectionner le mod√®le
    model_choice = st.radio("Choisissez un mod√®le :", ["Logistic Regression", "Random Forest"])

    # Correspondance entre le choix et le fichier du mod√®le
    model_name = "logistic_model" if model_choice == "Logistic Regression" else "random_forest"

    # Charger le mod√®le et le vectoriseur
    model, vectorizer = load_saved_model(model_name)

    # V√©rifier si le mod√®le est bien charg√©
    if model is not None and vectorizer is not None:
        # Entr√©e du texte de l'utilisateur
        news_text = st.text_area("‚úçÔ∏è Entrez l'article de presse :")

        # Pr√©diction avec le mod√®le s√©lectionn√©
        if st.button("üîç Pr√©dire"):
            if news_text:
                prediction = predict_news(model, vectorizer, news_text)
                st.success(f"üßê **R√©sultat** : {prediction}")
            else:
                st.warning("‚ö†Ô∏è Veuillez entrer un texte.")
    else:
        st.warning("üìå Veuillez d'abord entra√Æner et enregistrer un mod√®le.")

if __name__ == "__main__":
    main()
